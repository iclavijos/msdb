buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
    }
}

plugins {
    id 'io.freefair.lombok' version '6.5.1'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
    id 'maven-publish'
    id 'idea'
    id 'eclipse'
    id 'jacoco'
    id 'com.google.cloud.tools.jib'
    id 'com.gorylenko.gradle-git-properties'
    id 'com.github.node-gradle.node'
    id 'org.sonarqube'
    id 'io.spring.nohttp'
    id 'com.github.andygoossens.gradle-modernizer-plugin'
}

group = "com.icesoft.msdb"
version = "5.5.0"

description = ""

sourceCompatibility=17
targetCompatibility=17
assert System.properties["java.specification.version"] == "11" || "12" || "13" || "14" || "15" || "16" || "17" || "18"

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

idea {
    module {
        excludeDirs += files("node_modules")
    }
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

defaultTasks "bootRun"

springBoot {
    mainClass = "com.icesoft.msdb.MotorsportsDatabaseApp"
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    jvmArgs += '-Djava.security.egd=file:/dev/./urandom -Xmx256m'
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.required = false
}

modernizer {
    failOnViolations = true
    includeTestClasses = true
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    jvmArgs += '-Djava.security.egd=file:/dev/./urandom -Xmx256m'
    if (project.hasProperty('testcontainers')) {
        environment 'spring.profiles.active', 'testcontainers'
    }

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.required = false
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
    getDestinationDirectory().set(file("$buildDir/reports/tests"))
    reportOn test
}

task integrationTestReport(type: TestReport) {
    getDestinationDirectory().set(file("$buildDir/reports/tests"))
    reportOn integrationTest
}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

checkstyle {
    toolVersion "${checkstyleVersion}"
    configFile file("checkstyle.xml")
    checkstyleTest.enabled = false
}

nohttp {
    source.include "build.gradle", "README.md"
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        mavenBom "org.junit:junit-bom:5.8.1"
    }
}

dependencies {
    implementation platform("tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}" )

    implementation "tech.jhipster:jhipster-framework:${jhipsterDependenciesVersion}"
    implementation 'org.springframework.boot:spring-boot-starter'

    implementation "jakarta.annotation:jakarta.annotation-api"
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "io.dropwizard.metrics:metrics-core"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.module:jackson-module-jakarta-xmlbind-annotations:2.13.4"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5-jakarta"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv'
    implementation "commons-io:commons-io:${commonsIoVersion}"
    implementation 'javax.cache:cache-api'
    implementation "org.hibernate:hibernate-core:${hibernateVersion}"
    implementation "org.hibernate:hibernate-jcache:${hibernateVersion}"
    implementation "org.hibernate.validator:hibernate-validator"
    implementation "com.zaxxer:HikariCP"
    implementation "org.apache.commons:commons-lang3"
    implementation "org.apache.commons:commons-math3:3.6.1"
    implementation "commons-io:commons-io"
    implementation "jakarta.transaction:jakarta.transaction-api"
    implementation "org.ehcache:ehcache:${ehCacheVersion}"
    implementation "io.mongock:mongock-springboot:${mongockVersion}"
    implementation "io.mongock:mongodb-springdata-v3-driver:${mongockVersion}"
    implementation "net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}"
    testImplementation "org.testcontainers:mongodb:${testcontainersVersion}"
    // Mongo db driver was excluded from starter, adding manually
    implementation "org.mongodb:mongodb-driver-sync"
    implementation "org.flywaydb:flyway-core"
    implementation "org.flywaydb:flyway-mysql"
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "org.springframework.boot:spring-boot-loader-tools"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-data-elasticsearch"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation ("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-data"
    implementation "org.springframework.security:spring-security-web"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    implementation 'org.springframework.boot:spring-boot-starter-reactor-netty'

    implementation 'co.elastic.clients:elasticsearch-java:8.3.3'

    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api"
    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation 'io.springfox:springfox-oas:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'
    implementation "org.mariadb.jdbc:mariadb-java-client"

    implementation 'com.sendgrid:sendgrid-java:3.0.9'
    implementation 'com.cloudinary:cloudinary-http44:1.26.0'

    implementation 'com.google.maps:google-maps-services:0.15.0'

    implementation 'org.mnode.ical4j:ical4j:3.0.19'

    implementation "com.google.firebase:firebase-admin:7.1.0"

    implementation "io.vavr:vavr:0.10.4"

    implementation 'com.github.pengrad:java-telegram-bot-api:6.2.0'
    implementation 'org.apache.velocity:velocity-engine-core:2.3'

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernateVersion}"
    annotationProcessor "org.glassfish.jaxb:jaxb-runtime:${jaxbRuntimeVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}"
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:mariadb:${testcontainersVersion}"
    testImplementation "org.testcontainers:mongodb:${testcontainersVersion}"
    testImplementation "org.testcontainers:elasticsearch:${testcontainersVersion}"
    testImplementation "org.testcontainers:mongodb:${testcontainersVersion}"
    testImplementation 'org.mockito:mockito-inline'
    testImplementation "com.h2database:h2"

    developmentOnly "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
}

tasks.named('test') {
    useJUnitPlatform()
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "7.5"
}

if (project.hasProperty("nodeInstall")) {
    // Workaround node grade plugin not working on apple silicon https://github.com/node-gradle/gradle-node-plugin/issues/154
    OperatingSystem os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentOperatingSystem();
    Architecture arch = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentArchitecture();
    Boolean downloadNode = !os.isMacOsX() || arch.isAmd64()
    node {
        version = "14.18.1"
        npmVersion = "8.1.4"
        download = downloadNode
    }
}

compileJava {
    dependsOn processResources
    options.compilerArgs = [ '-Amapstruct.defaultComponentModel=spring', '-parameters' ]
}

processResources.dependsOn bootBuildInfo
